// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package modeles

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson51ee17fDecodeAvitoMessageMessageServicePkgModeles(in *jlexer.Lexer, out *MessagesGetResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "messages":
			if in.IsNull() {
				in.Skip()
				out.Messages = nil
			} else {
				in.Delim('[')
				if out.Messages == nil {
					if !in.IsDelim(']') {
						out.Messages = make([]Message, 0, 0)
					} else {
						out.Messages = []Message{}
					}
				} else {
					out.Messages = (out.Messages)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Message
					(v1).UnmarshalEasyJSON(in)
					out.Messages = append(out.Messages, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson51ee17fEncodeAvitoMessageMessageServicePkgModeles(out *jwriter.Writer, in MessagesGetResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"messages\":"
		out.RawString(prefix[1:])
		if in.Messages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Messages {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessagesGetResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson51ee17fEncodeAvitoMessageMessageServicePkgModeles(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessagesGetResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson51ee17fEncodeAvitoMessageMessageServicePkgModeles(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessagesGetResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson51ee17fDecodeAvitoMessageMessageServicePkgModeles(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessagesGetResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson51ee17fDecodeAvitoMessageMessageServicePkgModeles(l, v)
}
func easyjson51ee17fDecodeAvitoMessageMessageServicePkgModeles1(in *jlexer.Lexer, out *MessagesGetRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat":
			out.ChatId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson51ee17fEncodeAvitoMessageMessageServicePkgModeles1(out *jwriter.Writer, in MessagesGetRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat\":"
		out.RawString(prefix[1:])
		out.String(string(in.ChatId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessagesGetRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson51ee17fEncodeAvitoMessageMessageServicePkgModeles1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessagesGetRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson51ee17fEncodeAvitoMessageMessageServicePkgModeles1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessagesGetRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson51ee17fDecodeAvitoMessageMessageServicePkgModeles1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessagesGetRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson51ee17fDecodeAvitoMessageMessageServicePkgModeles1(l, v)
}
func easyjson51ee17fDecodeAvitoMessageMessageServicePkgModeles2(in *jlexer.Lexer, out *MessageAddResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.MessageId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson51ee17fEncodeAvitoMessageMessageServicePkgModeles2(out *jwriter.Writer, in MessageAddResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.MessageId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageAddResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson51ee17fEncodeAvitoMessageMessageServicePkgModeles2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageAddResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson51ee17fEncodeAvitoMessageMessageServicePkgModeles2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageAddResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson51ee17fDecodeAvitoMessageMessageServicePkgModeles2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageAddResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson51ee17fDecodeAvitoMessageMessageServicePkgModeles2(l, v)
}
func easyjson51ee17fDecodeAvitoMessageMessageServicePkgModeles3(in *jlexer.Lexer, out *MessageAddRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat":
			out.ChatId = string(in.String())
		case "author":
			out.AuthorId = string(in.String())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson51ee17fEncodeAvitoMessageMessageServicePkgModeles3(out *jwriter.Writer, in MessageAddRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat\":"
		out.RawString(prefix[1:])
		out.String(string(in.ChatId))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.AuthorId))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageAddRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson51ee17fEncodeAvitoMessageMessageServicePkgModeles3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageAddRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson51ee17fEncodeAvitoMessageMessageServicePkgModeles3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageAddRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson51ee17fDecodeAvitoMessageMessageServicePkgModeles3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageAddRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson51ee17fDecodeAvitoMessageMessageServicePkgModeles3(l, v)
}
func easyjson51ee17fDecodeAvitoMessageMessageServicePkgModeles4(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.MessageId = string(in.String())
		case "chat":
			out.ChatId = string(in.String())
		case "author":
			out.AuthorId = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "created_at":
			out.CreatedAt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson51ee17fEncodeAvitoMessageMessageServicePkgModeles4(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.MessageId))
	}
	{
		const prefix string = ",\"chat\":"
		out.RawString(prefix)
		out.String(string(in.ChatId))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.AuthorId))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson51ee17fEncodeAvitoMessageMessageServicePkgModeles4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson51ee17fEncodeAvitoMessageMessageServicePkgModeles4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson51ee17fDecodeAvitoMessageMessageServicePkgModeles4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson51ee17fDecodeAvitoMessageMessageServicePkgModeles4(l, v)
}
